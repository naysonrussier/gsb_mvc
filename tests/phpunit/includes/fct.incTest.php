<?php
include '.\includes\fct.inc.php';
use PHPUnit\Framework\TestCase;
/**
 * Generated by PHPUnit_SkeletonGenerator on 2020-03-27 at 06:03:59.
 */
class fctTest extends TestCase {

    /**
     * @var PdoGsb
     */
    protected $object;
    protected $visiteurNom;
    protected $visiteurPrenom;
    protected $visiteurId;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->visiteurNom = "Villechalane";
        $this->visiteurPrenom = "Louis";
        $this->visiteurId = "a131";
    }

    /**
     * Tester la persistence de la session
     * @covers connecter
     * @covers estConnecte
     */
    public function testPersistenceConnexion() {
        connecter($this->visiteurId, $this->visiteurNom, $this->visiteurPrenom);
        $this->assertTrue(estConnecte());
    }
    
    /**
     * @covers dateFrancaisVersAnglais
     */
    public function testDateFrancaisVersAnglais() {
        $this->assertEquals(dateFrancaisVersAnglais("01/01/2020"), "2020-01-01");
        $this->assertEquals(dateFrancaisVersAnglais("28/05/2020"), "2020-05-28");
    }
    
    /**
     * @covers dateAnglaisVersFrancais
     */
    public function testDateAnglaisVersFrancais() {
        $this->assertEquals(dateAnglaisVersFrancais("2020-01-01"), "01/01/2020");
        $this->assertEquals(dateAnglaisVersFrancais("2020-05-28"), "28/05/2020");
    }
    
    /**
     * Test de récupration du mois + année d'une date
     * @covers getMois
     */
    public function testGetMois() {
        $this->assertEquals(getMois("05/12/2019"), "201912");
        $this->assertEquals(getMois("08/02/2020"), "202002");
    }
    
    /**
     * @covers estEntierPositif
     */
    public function testEstEntierPositif() {
        $this->assertTrue(estEntierPositif(50));
        $this->assertTrue(estEntierPositif(0));
        $this->assertFalse(estEntierPositif("ags"));
        $this->assertFalse(estEntierPositif(-51));
    }
    
    /**
     * @covers estTableauEntiers
     */
    public function testEstTableauEntiers() {
        $this->assertTrue(estTableauEntiers([50,14,984]));
        $this->assertTrue(estTableauEntiers([154,0,4651,4788]));
        $this->assertFalse(estTableauEntiers([-51,15,751]));
        $this->assertFalse(estTableauEntiers([-51,15,"751a"]));
    }
    
    /**
     * @covers estDateDepassee
     */
    public function testEstDateDepasse() {
            $date = date('d/m/Y');
        $this->assertFalse(estDateDepassee($date));
            $date = date('01/01/Y');
        $this->assertFalse(estDateDepassee($date));
            $date = new Datetime('-1 year');
            $date->format("d/m/Y");
        $this->assertTrue(estDateDepassee($date));
        
    }
    
    /**
     * @covers estDateValide
     */
    public function testEstDateValide() {
        $this->assertTrue(estDateValide('01/05/2019'));
        $this->assertFalse(estDateValide('29/02/2019'));
        $this->assertFalse(estDateValide('2020-05-05'));
    }
    
    /**
     * @covers ajouterErreur
     * @covers nbErreurs
     */
    public function testGestionErreurs() {
        ajouterErreur("test");
        ajouterErreur("test");
        $this->assertTrue(isset($_REQUEST['erreurs']));
        $this->assertEquals(nbErreurs(), 2);
    }
    
}
